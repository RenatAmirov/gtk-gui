{-# LANGUAGE OverloadedStrings #-}

module Main where

import qualified Graphics.UI.Gtk as Gtk
import Graphics.UI.Gtk (set, on, AttrOp((:=)))  -- Исправлено!
import Data.IORef
import Control.Monad (void)
import Data.Text (Text, unpack, pack)
import Data.List (transpose)

-- = Логика игры =
-- Типы для представления игрока и клетки на доске
data Player = X | O deriving (Eq, Show)
type Cell = Maybe Player
type Board = [[Cell]]

-- Создание пустой доски 3x3
emptyBoard :: Board
emptyBoard = replicate 3 (replicate 3 Nothing)

-- Функция для выполнения хода
makeMove :: Board -> Int -> Int -> Player -> Maybe Board
makeMove board row col player
  | row < 0 || row > 2 || col < 0 || col > 2 = Nothing
  | (board !! row !! col) /= Nothing = Nothing
  | otherwise = Just $ update2DList row col (Just player) board
  where
    update2DList i j val xs = take i xs ++ [take j (xs !! i) ++ [val] ++ drop (j+1) (xs !! i)] ++ drop (i+1) xs

-- Проверка наличия победителя
checkWinner :: Board -> Maybe Player
checkWinner board = 
  let lines = board ++ transpose board ++ [diag board, diag (map reverse board)] -- Все строки, столбцы и диагонали
  in case filter allEqual (filter (not . any null) lines) of
      ((Just p):_):_ -> Just p -- Если есть линия с одинаковыми значениями
      _ -> Nothing
  where
    allEqual (x:xs) = all (== x) xs
    allEqual _ = False
    diag b = [b !! i !! i | i <- [0..2]]

-- Проверка на ничью (доска заполнена и победителя нет)
isDraw :: Board -> Bool
isDraw board = all (all (/= Nothing)) board && checkWinner board == Nothing

-- = Графический интерфейс GTK =
-- Создание главного окна
createWindow :: IORef Board -> IORef Player -> IO ()
createWindow boardRef currentPlayerRef = do
  Gtk.initGUI
  -- Создание окна
  window <- Gtk.windowNew  
  Gtk.set window [ Gtk.windowTitle := pack "Крестики-нолики", Gtk.containerBorderWidth := 10 ]

  -- Создание таблицы 3x3 для кнопок
  grid <- Gtk.gridNew
  Gtk.gridSetRowSpacing grid 5
  Gtk.gridSetColumnSpacing grid 5
  Gtk.containerAdd window grid

  -- Создание метки для отображения текущего хода
  statusLabel <- Gtk.labelNew (Just (pack "Ход: X"))
  Gtk.containerAdd grid statusLabel
  Gtk.gridAttach grid statusLabel 0 3 3 1 -- Метка занимает всю ширину сетки

  -- Создание кнопок для игрового поля и привязка обработчиков событий
  buttonGrid <- Gtk.gridNew
  Gtk.gridSetRowSpacing buttonGrid 5
  Gtk.gridSetColumnSpacing buttonGrid 5
  Gtk.gridAttach grid buttonGrid 0 0 3 3

  let createButton row col = do
        button <- Gtk.buttonNewWithLabel (pack "")
        Gtk.gridAttach buttonGrid button col row 1 1
        return button

  buttons <- sequence [ createButton row col | row <- [0..2], col <- [0..2] ]

  -- Функция обновления интерфейса
  let updateUI = do
        board <- readIORef boardRef
        currentPlayer <- readIORef currentPlayerRef
        let statusText = case checkWinner board of
                          Just p -> "Победитель: " ++ show p
                          Nothing -> if isDraw board then "Ничья!" else "Ход: " ++ show currentPlayer
        void $ Gtk.set statusLabel [ Gtk.labelLabel := pack statusText ]

        -- Обновление текста на кнопках
        sequence_ [ do
          let cellText = case (board !! row !! col) of
                           Just X -> "X"
                           Just O -> "O"
                           Nothing -> ""
          void $ Gtk.set button [ Gtk.buttonLabel := pack cellText ]
          | row <- [0..2], col <- [0..2], let button = buttons !! (row * 3 + col) ]

  -- Обработчик нажатия на кнопку
  let onClicked row col = do
        board <- readIORef boardRef
        currentPlayer <- readIORef currentPlayerRef
        case makeMove board row col currentPlayer of
          Just newBoard -> do
            writeIORef boardRef newBoard
            case checkWinner newBoard of
              Just _ -> updateUI -- Игра окончена
              Nothing -> do
                let nextPlayer = if currentPlayer == X then O else X
                writeIORef currentPlayerRef nextPlayer
                updateUI
          Nothing -> return () -- Недопустимый ход

  -- Привязка обработчиков к кнопкам
  sequence_ [ Gtk.on button Gtk.buttonActivated $ onClicked row col
            | row <- [0..2], col <- [0..2], let button = buttons !! (row * 3 + col) ]

  -- Обработчик закрытия окна
  Gtk.on window Gtk.objectDestroy Gtk.mainQuit

  -- Запуск приложения
  Gtk.widgetShowAll window
  Gtk.mainGUI

-- Точка входа в программу
main :: IO ()
main = do
  Gtk.initGUI
  boardRef <- newIORef emptyBoard
  currentPlayerRef <- newIORef X
  createWindow boardRef currentPlayerRef